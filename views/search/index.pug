extends ../layouts/common
block content
  header(style="background:url('/public/home/img/bg-pattern.png'), linear-gradient(to left, #7b4397, #dc2430);height:10%;")
  #searchMore.container.mt-5(style="padding-top:80px;")
    .section-heading.text-center.mb-5
      h2 More Search
      p.text-muted#noti everything you want
      hr
    form(action="/search/get").d-flex
      //- search value
      input.form-control#searchValue(type="text", placeholder="Search value", name="search", value=querys.search)
      //- input page
      input(type="hidden", value="1", name="page")
      //- search price
      select.custom-select#searchPrice(name="price")
        option(value="") Choose Price
        option(value="100to500") 100$ - 500$
        option(value="500to1000") 500$ - 1000$
      //- search by producer
      select.custom-select#searchProducer(name="producer")
        option(value="") Choose Producer
        each producer in producers
          option(value=producer.producer_id)= producer.producer_name
      //- sort name
      select.custom-select#sortByName(name="sortByName")
        option(value="") Sort By Name
        option(value="AtoZ") A - Z
        option(value="ZtoA") Z - A
      //- sort price
      select.custom-select#sortByPrice(name="sortByPrice")
        option(value="") Sort By Price
        option(value="Asc") Asc
        option(value="Desc") Desc
      //- button seach
  .section-heading.text-center.mb-5.mt-5
    //   h2 Your Search
    //   p.text-muted='There is ' + products.length + '  products'
      hr
  #root    
    #containerFeature.d-flex.flex-wrap.justify-content-around.container
      - let pages = Math.ceil(products.length / 6)
      - let start = (((querys.page) - 1)*6)
      - let end = ((querys.page)*6)
      - for(let i = start; i < end && i < products.length; i++)
        - const found = producers.find((elm)=>{return elm.producer_id == products[0].producer})
        figure.snip1527.mt-3
          .image
            img(src= products[i].product_img, alt='pr-sample25')
          figcaption
            .date
              i.fas.fa-info
            h3= products[i].product_name
            h4= found.producer_name
            p It is a long established fact that a reader will be distracted.
          a(href='/product/'+products[i].id)
            span.btn.btn-light.text-danger.border-danger.mt-1.ml-1= '$' + products[i].product_price
            span.border.rounded-0.showQuantity.btn.btn-light.text-capitalize='in stock: ' + products[i].quantity
    .text-center.mt-3.mb-5
      - for(let i = 1; i <= pages; i++)
        if querys.page == i
          a.btn.mr-2.active.page-btn(
            onclick=`loadPage(${i})`,
            href='#searchMore',)= i
        else
          a.btn.mr-2.page-btn( style="background-color: #c1c1c1",
            href='#searchMore',
            onclick=`loadPage(${i})`)= i
  script(src="/public/js/axios.min.js")
  script(src="/public/js/jquery.min.js")
  script.

    const searchValue = $('#searchValue');
    const searchPrice = $('#searchPrice');
    const searchProducer = $('#searchProducer');
    const sortByName = $('#sortByName');
    const sortByPrice = $('#sortByPrice');
    const root = $('#root');

    let searchVal = "";
    let pageVal = "1";
    let priceVal = "";
    let producerVal = "";
    let sortByNameVal = "";
    let sortByPriceVal = "";

    function render(container, items){
      container.html(items);
    }
    function getLink(search="",page="",price="",producer="",sortByName="",sortByPrice=""){
      let link = `/search/getSearch?search=${search}&page=${page}&price=${price}&producer=${producer}&sortByName=${sortByName}&sortByPrice=${sortByPrice}`;
      return link;
    }
    //- Load search value on keyup
    searchValue.on('keyup', async function(){
      pageVal = 1;
      searchVal = this.value;
      const data = await postSearch();
      render(root, data.data);
    });
    //- Load search price on change
    searchPrice.on('change', async function(){
      pageVal = 1;
      priceVal = this.value;
      const data = await postSearch();
      render(root, data.data);
    });
    //- Load search producerVal on change
    searchProducer.on('change', async function(){
      pageVal = 1;
      producerVal = this.value;
      const data = await postSearch();
      render(root, data.data);
    });
    //- Load search sortByNameVal on change
    sortByName.on('change', async function(){
      pageVal = 1;
      sortByNameVal = this.value;
      const data = await postSearch();
      render(root, data.data);
    });
    //- Load search sortByPriceVal on change
    sortByPrice.on('change', async function(){
      sortByPriceVal = this.value;
      pageVal = 1;
      const data = await postSearch();
      render(root, data.data);
    });
    //- Load on click page
    async function loadPage(page){
      pageVal = page;
      const data = await postSearch();
      render(root, data.data);
    }
    function postSearch(){
      return axios.post('/search/getSearch',{
        search: searchVal,
        page: pageVal,
        price: priceVal,
        producer: producerVal,
        sortByName: sortByNameVal,
        sortByPrice: sortByPriceVal,
      }, { onUploadProgress: addLoadingAnimate() });
    }
    function addLoadingAnimate(){
      $('#root').html(`
        <div class="lds-css ng-scope" style="margin:auto;width: 200px; height: 200px;">
          <div style="width:100%;height:100%" class="lds-ripple">
            <div></div>
            <div></div>
          </div>
      </div>`);
    }
